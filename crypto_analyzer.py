import requests
import json
from typing import List, Dict, Any
from config import COINGECKO_API_KEY, MIN_MARKET_CAP, MIN_VOLUME_24H, MAX_PRICE_PER_COIN

class CryptoAnalyzer:
    def __init__(self):
        self.base_url = "https://api.coingecko.com/api/v3"
        self.headers = {}
        if COINGECKO_API_KEY:
            self.headers['X-CG-API-KEY'] = COINGECKO_API_KEY
    
    def get_top_cryptocurrencies(self, limit: int = 100) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        try:
            url = f"{self.base_url}/coins/markets"
            params = {
                'vs_currency': 'usd',
                'order': 'market_cap_desc',
                'per_page': limit,
                'page': 1,
                'sparkline': False,
                'price_change_percentage': '24h,7d'
            }
            
            response = requests.get(url, params=params, headers=self.headers)
            response.raise_for_status()
            
            return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def filter_suitable_cryptocurrencies(self, cryptocurrencies: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        suitable_coins = []
        
        for coin in cryptocurrencies:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
                if (coin.get('market_cap', 0) >= MIN_MARKET_CAP and
                    coin.get('total_volume', 0) >= MIN_VOLUME_24H and
                    coin.get('current_price', 0) <= MAX_PRICE_PER_COIN and
                    coin.get('current_price', 0) > 0.01):  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ 1 —Ü–µ–Ω—Ç
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    coin_info = {
                        'id': coin.get('id'),
                        'symbol': coin.get('symbol', '').upper(),
                        'name': coin.get('name'),
                        'current_price': coin.get('current_price', 0),
                        'market_cap': coin.get('market_cap', 0),
                        'volume_24h': coin.get('total_volume', 0),
                        'price_change_24h': coin.get('price_change_percentage_24h', 0),
                        'price_change_7d': coin.get('price_change_percentage_7d', 0),
                        'market_cap_rank': coin.get('market_cap_rank', 0),
                        'image': coin.get('image', '')
                    }
                    
                    suitable_coins.append(coin_info)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–Ω–µ—Ç—ã {coin.get('name', 'Unknown')}: {e}")
                continue
        
        return suitable_coins
    
    def calculate_investment_score(self, coin: Dict[str, Any]) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        score = 0.0
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ —Ü–µ–Ω–µ (—á–µ–º –¥–µ—à–µ–≤–ª–µ, —Ç–µ–º –ª—É—á—à–µ)
        price = coin.get('current_price', 0)
        if price > 0:
            price_score = max(0, 10 - price)  # –ú–∞–∫—Å–∏–º—É–º 10 –±–∞–ª–ª–æ–≤ –∑–∞ –æ—á–µ–Ω—å –¥–µ—à–µ–≤—ã–µ –º–æ–Ω–µ—Ç—ã
            score += price_score * 0.3
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤ (—á–µ–º –±–æ–ª—å—à–µ –æ–±—ä–µ–º, —Ç–µ–º –ª—É—á—à–µ)
        volume = coin.get('volume_24h', 0)
        if volume > 0:
            volume_score = min(10, volume / 10000000)  # 10 –±–∞–ª–ª–æ–≤ –∑–∞ –æ–±—ä–µ–º > 100M
            score += volume_score * 0.2
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (—É–º–µ—Ä–µ–Ω–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ª—É—á—à–µ)
        market_cap = coin.get('market_cap', 0)
        if market_cap > 0:
            if 10000000 <= market_cap <= 1000000000:  # 10M - 1B
                market_cap_score = 10
            elif market_cap < 10000000:
                market_cap_score = 5
            else:
                market_cap_score = 7
            score += market_cap_score * 0.2
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã (–Ω–µ–±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç –ª—É—á—à–µ)
        price_change_24h = coin.get('price_change_24h', 0)
        if -20 <= price_change_24h <= 10:  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
            price_change_score = 10
        elif price_change_24h < -20:
            price_change_score = 5  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –¥–Ω–µ
        else:
            price_change_score = 3  # –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç
        score += price_change_score * 0.3
        
        return score
    
    def get_top_3_recommendations(self) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        cryptocurrencies = self.get_top_cryptocurrencies(limit=200)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ
        suitable_coins = self.filter_suitable_cryptocurrencies(cryptocurrencies)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        for coin in suitable_coins:
            coin['investment_score'] = self.calculate_investment_score(coin)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Ü–µ–Ω–∫–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        suitable_coins.sort(key=lambda x: x.get('investment_score', 0), reverse=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3
        return suitable_coins[:3]
    
    def get_coin_description(self, coin: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        """
        name = coin.get('name', 'Unknown')
        symbol = coin.get('symbol', '')
        price = coin.get('current_price', 0)
        price_change_24h = coin.get('price_change_24h', 0)
        price_change_7d = coin.get('price_change_7d', 0)
        market_cap_rank = coin.get('market_cap_rank', 0)
        volume_24h = coin.get('volume_24h', 0)
        market_cap = coin.get('market_cap', 0)
        
        description = f"ü™ô {name} ({symbol})\n"
        description += f"üí∞ –¶–µ–Ω–∞: ${price:.4f}\n"
        description += f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {price_change_24h:.1f}%\n"
        description += f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 7 –¥–Ω–µ–π: {price_change_7d:.1f}%\n"
        description += f"üèÜ –†–∞–Ω–≥ –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: #{market_cap_rank}\n"
        description += f"üìä –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: ${volume_24h/1000000:.1f}M\n"
        description += f"üíé –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${market_cap/1000000:.1f}M\n\n"
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –ø–æ–∫—É–ø–∫–∏
        reasons = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã
        if price <= 0.1:
            reasons.append("‚úÖ –°–≤–µ—Ä—Ö–¥–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞ - –∑–∞ $10 –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å {:.0f} –º–æ–Ω–µ—Ç".format(10/price))
        elif price <= 0.5:
            reasons.append("‚úÖ –û—á–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞ - –∑–∞ $10 –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å {:.0f} –º–æ–Ω–µ—Ç".format(10/price))
        elif price <= 1:
            reasons.append("‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞ - –∑–∞ $10 –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å {:.0f} –º–æ–Ω–µ—Ç".format(10/price))
        elif price <= 2:
            reasons.append("‚úÖ –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ - –∑–∞ $10 –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å {:.0f} –º–æ–Ω–µ—Ç".format(10/price))
        
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        if price_change_24h <= -15:
            reasons.append("‚úÖ –°–∏–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ (-{:.1f}%) - –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –¥–Ω–µ".format(abs(price_change_24h)))
        elif price_change_24h <= -8:
            reasons.append("‚úÖ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ (-{:.1f}%) - —Ö–æ—Ä–æ—à–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞".format(abs(price_change_24h)))
        elif price_change_24h <= -3:
            reasons.append("‚úÖ –ù–µ–±–æ–ª—å—à–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è (-{:.1f}%) - –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏".format(abs(price_change_24h)))
        elif price_change_24h >= 15:
            reasons.append("‚ö†Ô∏è –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç (+{:.1f}%) - –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è, –Ω–æ —Ç—Ä–µ–Ω–¥ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π".format(price_change_24h))
        elif price_change_24h >= 5:
            reasons.append("‚úÖ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥ (+{:.1f}%) - –º–æ–Ω–µ—Ç–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç —Å–∏–ª—É".format(price_change_24h))
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
        if price_change_7d <= -20:
            reasons.append("üìâ –ù–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ -{:.1f}% - –≤–æ–∑–º–æ–∂–Ω–æ –¥–Ω–æ, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –æ—Ç—Å–∫–æ–∫–∞".format(abs(price_change_7d)))
        elif price_change_7d >= 20:
            reasons.append("üìà –ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç +{:.1f}% - —Å–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥".format(price_change_7d))
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–Ω–≥–∞ –∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        if market_cap_rank <= 50:
            reasons.append("üèÜ –¢–æ–ø-50 –ø—Ä–æ–µ–∫—Ç - –≤—ã—Å–æ–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –¥–æ–≤–µ—Ä–∏–µ —Ä—ã–Ω–∫–∞")
        elif market_cap_rank <= 100:
            reasons.append("ü•à –¢–æ–ø-100 –ø—Ä–æ–µ–∫—Ç - —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–æ—Å—Ç–∞")
        elif market_cap_rank <= 200:
            reasons.append("ü•â –¢–æ–ø-200 –ø—Ä–æ–µ–∫—Ç - –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º —Ä–∏—Å–∫–æ–º")
        elif market_cap_rank <= 500:
            reasons.append("üíé –¢–æ–ø-500 –ø—Ä–æ–µ–∫—Ç - –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞")
        
        # –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        if volume_24h >= 100000000:  # 100M+
            reasons.append("üíß –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞")
        elif volume_24h >= 50000000:  # 50M+
            reasons.append("üåä –í—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - –ª–µ–≥–∫–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å")
        elif volume_24h >= 10000000:  # 10M+
            reasons.append("üí¶ –•–æ—Ä–æ—à–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–∏")
        elif volume_24h >= 5000000:  # 5M+
            reasons.append("üíß –£–º–µ—Ä–µ–Ω–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - —Ç–æ—Ä–≥–∏ –≤–æ–∑–º–æ–∂–Ω—ã")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        if market_cap >= 1000000000:  # 1B+
            reasons.append("üíé –ö—Ä—É–ø–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è - –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç")
        elif market_cap >= 100000000:  # 100M+
            reasons.append("üíé –°—Ä–µ–¥–Ω—è—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è - —Ö–æ—Ä–æ—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞")
        elif market_cap >= 10000000:  # 10M+
            reasons.append("üíé –ú–∞–ª—ã–π –ø—Ä–æ–µ–∫—Ç - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫, –Ω–æ –±–æ–ª—å—à–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        if price_change_24h > 0 and price_change_7d > 0:
            reasons.append("üöÄ –î–≤–æ–π–Ω–æ–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥ - 24—á –∏ 7–¥ —Ä–æ—Å—Ç")
        elif price_change_24h < 0 and price_change_7d < 0:
            reasons.append("üìâ –î–≤–æ–π–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ - –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫ –æ—Ç –¥–Ω–∞")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω
        if not reasons:
            reasons.append("‚úÖ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        
        description += "ü§î –ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –∫—É–ø–∏—Ç—å:\n"
        for reason in reasons:
            description += f"{reason}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∏—Å–∫-—Ñ–∞–∫—Ç–æ—Ä—ã
        risk_factors = []
        if price_change_24h <= -20:
            risk_factors.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω—ã –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–∞–¥–µ–Ω–∏—è")
        if volume_24h < 1000000:
            risk_factors.append("‚ö†Ô∏è –ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - —Å–ª–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
        if market_cap_rank > 1000:
            risk_factors.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - –º–∞–ª—ã–π –ø—Ä–æ–µ–∫—Ç")
        
        if risk_factors:
            description += "\n‚ö†Ô∏è –†–∏—Å–∫-—Ñ–∞–∫—Ç–æ—Ä—ã:\n"
            for risk in risk_factors:
                description += f"{risk}\n"
        
        return description
