#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–æ—Ç–∞ –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import urllib.request
import urllib.parse
import json
from datetime import datetime

def load_env():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_vars = {}
    try:
        with open('.env', 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key] = value
        return env_vars
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

def send_telegram_message(token, chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        # –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        data = urllib.parse.urlencode(data).encode('utf-8')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        req = urllib.request.Request(url, data=data)
        response = urllib.request.urlopen(req)
        
        result = json.loads(response.read().decode('utf-8'))
        
        if result.get('ok'):
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def get_crypto_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API CoinGecko
        url = "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=50&page=1&sparkline=false&price_change_percentage=24h"
        
        req = urllib.request.Request(url)
        response = urllib.request.urlopen(req)
        data = json.loads(response.read().decode('utf-8'))
        
        return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def analyze_cryptocurrencies(crypto_data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–ø-3"""
    suitable_coins = []
    
    for coin in crypto_data:
        try:
            price = coin.get('current_price', 0)
            market_cap = coin.get('market_cap', 0)
            volume = coin.get('total_volume', 0)
            price_change = coin.get('price_change_percentage_24h', 0)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            if (price <= 5 and  # –¶–µ–Ω–∞ –Ω–µ –±–æ–ª—å—à–µ $5
                market_cap >= 10000000 and  # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –º–µ–Ω—å—à–µ $10M
                volume >= 1000000 and  # –û–±—ä–µ–º –Ω–µ –º–µ–Ω—å—à–µ $1M
                price > 0.01):  # –¶–µ–Ω–∞ –Ω–µ –º–µ–Ω—å—à–µ 1 —Ü–µ–Ω—Ç–∞
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É
                score = 0
                if price <= 1:
                    score += 3
                if -20 <= price_change <= 10:
                    score += 3
                if market_cap <= 1000000000:
                    score += 2
                if volume >= 5000000:
                    score += 2
                
                coin_info = {
                    'name': coin.get('name', 'Unknown'),
                    'symbol': coin.get('symbol', '').upper(),
                    'price': price,
                    'price_change': price_change,
                    'market_cap_rank': coin.get('market_cap_rank', 0),
                    'volume': volume,
                    'score': score
                }
                
                suitable_coins.append(coin_info)
                
        except Exception as e:
            continue
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Ü–µ–Ω–∫–µ –∏ –±–µ—Ä–µ–º —Ç–æ–ø-3
    suitable_coins.sort(key=lambda x: x['score'], reverse=True)
    return suitable_coins[:3]

def format_message(recommendations):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
    
    message = f"üöÄ <b>–ï–ñ–ï–î–ù–ï–í–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–ê–ú</b>\n"
    message += f"üìÖ –î–∞—Ç–∞: {current_time}\n"
    message += f"üí∞ –ë—é–¥–∂–µ—Ç –Ω–∞ –¥–µ–Ω—å: $10\n"
    message += f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%H:%M')}\n\n"
    message += f"üîç <b>–¢–û–ü-3 –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ –î–õ–Ø –ü–û–ö–£–ü–ö–ò:</b>\n\n"
    
    if not recommendations:
        message += "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        return message
    
    for i, coin in enumerate(recommendations, 1):
        message += f"<b>{i}. {coin['name']} ({coin['symbol']})</b>\n"
        message += f"üí∞ –¶–µ–Ω–∞: ${coin['price']:.4f}\n"
        message += f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {coin['price_change']:.1f}%\n"
        message += f"üèÜ –†–∞–Ω–≥: #{coin['market_cap_rank']}\n"
        message += f"üìä –û–±—ä–µ–º: ${coin['volume']/1000000:.1f}M\n"
        message += f"‚≠ê –û—Ü–µ–Ω–∫–∞: {coin['score']}/10\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        reasons = []
        if coin['price'] <= 1:
            reasons.append("‚úÖ –û—á–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞")
        if -30 <= coin['price_change'] <= -5:
            reasons.append("‚úÖ –•–æ—Ä–æ—à–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
        if coin['market_cap_rank'] <= 100:
            reasons.append("‚úÖ –í—Ö–æ–¥–∏—Ç –≤ —Ç–æ–ø-100")
        if coin['volume'] >= 5000000:
            reasons.append("‚úÖ –í—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å")
        
        if reasons:
            message += f"ü§î –ü–æ—á–µ–º—É –∫—É–ø–∏—Ç—å: {', '.join(reasons)}\n"
        else:
            message += "ü§î –ü–æ—á–µ–º—É –∫—É–ø–∏—Ç—å: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n"
        
        message += "\n"
    
    message += "üí° <b>–û–ë–©–ò–ï –°–û–í–ï–¢–´:</b>\n"
    message += "‚Ä¢ –ù–µ –≤–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ—Ç–µ—Ä—è—Ç—å\n"
    message += "‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å\n"
    message += "‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π\n"
    message += "‚Ä¢ –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —ç—Ç–æ –∫–∞–∫ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é\n\n"
    
    message += "‚ö†Ô∏è <b>–û–¢–ö–ê–ó –û–¢ –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò:</b>\n"
    message += "–≠—Ç–æ –Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç. –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ."
    
    return message

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ö–†–ò–ü–¢–û-–°–û–í–ï–¢–ù–ò–ö–ê\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    env_vars = load_env()
    if not env_vars:
        return
    
    token = env_vars.get('TELEGRAM_BOT_TOKEN')
    chat_id = env_vars.get('CHAT_ID')
    
    if not token or not chat_id:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ CHAT_ID –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    print(f"‚úÖ –¢–æ–∫–µ–Ω: {token[:20]}...")
    print(f"‚úÖ Chat ID: {chat_id}")
    print()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    test_message = "üß™ <b>–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>\n\n–ö—Ä–∏–ø—Ç–æ-—Å–æ–≤–µ—Ç–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
    
    if send_telegram_message(token, chat_id, test_message):
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö...")
    crypto_data = get_crypto_data()
    
    if not crypto_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö")
        return
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(crypto_data)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-3
    print("üìä –ê–Ω–∞–ª–∏–∑ –∏ –≤—ã–±–æ—Ä —Ç–æ–ø-3...")
    recommendations = analyze_cryptocurrencies(crypto_data)
    
    if not recommendations:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
        return
    
    print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    message = format_message(recommendations)
    
    if send_telegram_message(token, chat_id, message):
        print("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()


