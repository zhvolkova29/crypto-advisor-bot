#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫—Ä–∏–ø—Ç–æ-—Å–æ–≤–µ—Ç–Ω–∏–∫–∞
–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å—Ä–∞–∑—É
"""

import asyncio
from crypto_analyzer import CryptoAnalyzer
from config import TELEGRAM_BOT_TOKEN, CHAT_ID

async def test_analysis():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    """
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...")
    
    analyzer = CryptoAnalyzer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = analyzer.get_top_3_recommendations()
        
        if not recommendations:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            return
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:\n")
        
        for i, coin in enumerate(recommendations, 1):
            print(f"{i}. {coin['name']} ({coin['symbol']})")
            print(f"   üí∞ –¶–µ–Ω–∞: ${coin['current_price']:.4f}")
            print(f"   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {coin['price_change_24h']:.1f}%")
            print(f"   üèÜ –†–∞–Ω–≥: #{coin['market_cap_rank']}")
            print(f"   üìä –û–±—ä–µ–º: ${coin['volume_24h']/1000000:.1f}M")
            print(f"   ‚≠ê –û—Ü–µ–Ω–∫–∞: {coin.get('investment_score', 0):.2f}/10")
            print()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            description = analyzer.get_coin_description(coin)
            print(description)
            print("-" * 50)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

async def test_telegram_send():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    """
    if not TELEGRAM_BOT_TOKEN or not CHAT_ID:
        print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ CHAT_ID")
        return
    
    print("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram...")
    
    try:
        from telegram import Bot
        from telegram.error import TelegramError
        
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = "üß™ <b>–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>\n\n"
        test_message += "–ö—Ä–∏–ø—Ç–æ-—Å–æ–≤–µ—Ç–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n"
        test_message += "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
        
        await bot.send_message(
            chat_id=CHAT_ID,
            text=test_message,
            parse_mode='HTML'
        )
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        
    except TelegramError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ-—Å–æ–≤–µ—Ç–Ω–∏–∫–∞\n")
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
    await test_analysis()
    
    print("\n" + "="*60 + "\n")
    
    # –¢–µ—Å—Ç Telegram
    await test_telegram_send()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
